#include <gl/glut.h>
#include <iostream>
#include<ctime>

GLfloat EarthRotation = 0.0f; //지구 자전
GLfloat EarthRevolution = 0.0f;// 지구 공전
GLfloat MoonRevolution = 0.0f; //달 공전
GLfloat MercuryRotation = 0.0f;//수성 자전
GLfloat MercuryRevolution = 0.0f;//수성 공전
GLfloat VenusRotation = 0.0f;//금성 자전
GLfloat VenusRevolution = 0.0f;//금성 공전
GLfloat MarsRotation = 0.0f; //화성 자전
GLfloat MarsRevolution = 0.0f;//화성 공전
GLfloat JupiterRotation = 0.0f;//목성 자전
GLfloat JupiterRevolution = 0.0f;//목성 공전
GLfloat SaturnRotation = 0.0f;//토성 자전
GLfloat SaturnRevolution = 0.0f;//토성 공전
GLfloat UranusRotation = 0.0f;//천왕성 자전
GLfloat UranusRevolution = 0.0f;//천왕성 공전
GLfloat NeptuneRotation = 0.0f; //해왕성 자전
GLfloat NeptuneRevolution = 0.0f;//해왕성 공전

GLfloat Year = 3600.0f;
GLint delay = 10;

float randX = static_cast<float>(rand()) / RAND_MAX * 2.0f - 1.0f; //랜덤 시점을 위한 rand함수
float randY = static_cast<float>(rand()) / RAND_MAX * 2.0f - 1.0f;
float randZ = static_cast<float>(rand()) / RAND_MAX * 2.0f - 1.0f;

bool isTimerRunning = true; //멈추는지 확인하기 위한 함수

void Timer(int value)
{
	//지구 자전 공전
	EarthRotation += (360.0f * 360.0f) / Year;    // 지구 자전 주기 1로 
	if (EarthRotation >= 360.0f) {
		EarthRotation = 0.0f;
	}
	EarthRevolution += 360.0f / Year;// 지구가 태양 공전 주기 1년.
	if (EarthRevolution >= 360.0f) {
		EarthRevolution = 0.0f;
	}
	//달 공전
	MoonRevolution += (360.0f * 12.0f) / Year;// 달의 공전 주기는 약30일
	if (MoonRevolution >= 360.0f) {
		MoonRevolution = 0.0f;
	}
	//수성 자전 공전
	MercuryRotation += (360.0f * 59.0f) / Year; //수성 자전주기 59일 지구 자전의 59배
	if (MercuryRotation >= 360.0f) {
		MercuryRotation = 0.0f;
	}

	MercuryRevolution += (360.0f*3.7f) / Year; //달의공전을 0.07이라 했을 때 수성의 공전은 0.25
	if (MercuryRevolution >= 360.0f) {
		MercuryRevolution = 0.0f;
	}
	//금성 자전 공전
	VenusRotation += (360.0f * 240.0f) / Year; //수성 자전주기 59일 지구 자전의 59배
	if (MercuryRotation >= 360.0f) {
		MercuryRotation = 0.0f;
	}

	VenusRevolution += (360.0f*1.5f) / Year; //달공전을 0.07이라 했을 때 수성의 공전은 0.25
	if (MercuryRevolution >= 360.0f) {
		MercuryRevolution = 0.0f;
	}
	//화성 자전 공전
	MarsRotation += (360.0f * 360.0f) / Year; //화성 자전주기 지구와 비슷
	if (MercuryRotation >= 360.0f) {
		MercuryRotation = 0.0f;
	}

	MarsRevolution += (360.0f*0.47f) / Year; //달공전을 0.07이라 했을 때 화성의 공전은 1.9
	if (MercuryRevolution >= 360.0f) {
		MercuryRevolution = 0.0f;
	}
	//목성 자전 공전
	JupiterRotation += (360.0f * 750.0f) / Year; //목성 자전주기는 약 11시간
	if (MercuryRotation >= 360.0f) {
		MercuryRotation = 0.0f;
	}

	JupiterRevolution += (360.0f*0.07f) / Year; //목성의 공전주기는 약 11년 
	if (MercuryRevolution >= 360.0f) {
		MercuryRevolution = 0.0f;
	}
	//토성 자전 공전
	SaturnRotation += (360.0f * 780.0f) / Year; //토성의 자전주기는 약 10시간
	if (MercuryRotation >= 360.0f) {
		MercuryRotation = 0.0f;
	}
	SaturnRevolution += (360.0f*0.025f) / Year; //토성의 공전주기는 약 30년
	if (MercuryRevolution >= 360.0f) {
		MercuryRevolution = 0.0f;
	}
	//천왕성 자전 공전
	UranusRotation += (360.0f * 540.0f) / Year; //천왕성의 자전주긴느 11시간
	if (MercuryRotation >= 360.0f) {
		MercuryRotation = 0.0f;
	}

	UranusRevolution += (360.0f*0.01f) / Year; //천왕성의 공전주긴느 약 84년
	if (MercuryRevolution >= 360.0f) {
		MercuryRevolution = 0.0f;
	}
	//해왕성 자전공전
	NeptuneRotation += (360.0f * 440.0f) / Year; //해왕성 자전주기 16시간 지구의 2/3
	if (NeptuneRotation >= 360.0f) {
		NeptuneRotation = 0.0f;
	}

	NeptuneRevolution += (360.0f*0.005f) / Year; //해왕성 공전주기 160년 약58,000일
	if (NeptuneRevolution >= 360.0f) {
		NeptuneRevolution = 0.0f;
	}

	glutPostRedisplay();
	glutTimerFunc(delay, Timer, 1);
}
void Keyboard(int key, int x, int y)
{
	const float zoomFactor = 0.1f;  // Adjust the zoom factor as needed
	const float rotationAngle = 5.0f;  // Adjust the rotation angle as needed

	switch (key)
	{
	case GLUT_KEY_UP:
		glScalef(1.0f + zoomFactor, 1.0f + zoomFactor, 1.0f + zoomFactor);// 줌인
		break;
	case GLUT_KEY_DOWN:
		glScalef(1.0f - zoomFactor, 1.0f - zoomFactor, 1.0f - zoomFactor);  // 줌아웃
		break;
	case GLUT_KEY_LEFT:
		glRotatef(rotationAngle, 0.0f, 0.0f, 1.0f);  // 우로 회전
		break;
	case GLUT_KEY_RIGHT:
		glRotatef(-rotationAngle, 0.0f, 0.0f, 1.0f);  // 좌로 회전
		break;
	}

	glutPostRedisplay();
}

void KeyBoardFunc(unsigned char key, int x, int y) {
	if (key == '+') {
		delay /= 2;
		if (delay < 1) {
			delay = 1;
		}
		glutTimerFunc(delay, Timer, 0);
	}
	else if (key == '-') {//-눌러도 빨라짐 //해결완료
		delay *= 2;
		if (delay < 1) {
			delay = 1;
		}
	}
	else if (key == ' ') {//스페이스바 눌러도 빨라짐
		if (isTimerRunning) {
			glutTimerFunc(0, NULL, 0);
			isTimerRunning = false;
		}
		else {
			glutTimerFunc(delay, Timer, 0);
			isTimerRunning = true;
		}
	}
	glutPostRedisplay();
}

void main_menu_select(int value)
{
	switch (value) {
	case 1:
		// 기본 시점
		gluLookAt(0.1, 0.1, 0.1, 0.1, 0.0, 0.0, 1.0, 1.5, 0.0); //카메라 위치
		break;
	case 2:
		// 위 시점
		gluLookAt(0.1, 1.0, 0.1, 0.1, 0.0, 0.0, 0.0, 1.0, 0.0);
		break;
	case 3:
		// 옆 시점
		gluLookAt(1.0, 0.1, 0.1, 0.1, 0.0, 0.0, 0.0, 1.0, 0.0);
		break;
	case 4:
		// 앞 시점
		gluLookAt(0.1, 0.1, 1.0, 0.1, 0.0, 0.0, 0.0, 1.0, 0.0);
		break;
	case 5:
		// 무작위 시점
		gluLookAt(randX, randY, randZ,0.1, 0.0, 0.0,0.0, 1.0, 0.0);
		break;
	default:
		break;
	}

	glutPostRedisplay();
}


void display()
{
	//수금지화목토천해
	glClear(GL_COLOR_BUFFER_BIT);

	//태양
	glColor3f(1.0, 0.0, 0.0);
	glutWireSphere(0.5, 40, 20);

	//지구
	glPushMatrix();
	glColor3f(0.0, 1.0, 0.0);
	glRotatef(EarthRevolution, 0.0f, 1.0f, 0.0f); // Earth's revolution
	glTranslatef(0.7f, 0.0f, 0.0f);
	glRotatef(-EarthRevolution, 0.0f, 1.0f, 0.0f);    // Earth의 Revolution에 의한 Earth의 회전 삭제.
	glRotatef(EarthRotation, 0.0f, 1.0f, 0.0f);    // Earth's rotation
	glutWireSphere(0.125, 20, 10); //태양 기준 1/4

	//달
	glPushMatrix();
	glColor3f(1.0, 1.0, 0.0);
	glRotatef(-EarthRotation, 0.0f, 1.0f, 0.0f);    // Earth의 Rotation에 의한 Moon의 회전 삭제.
	glRotatef(MoonRevolution, 0.0f, 1.0f, 0.0f); // Moon's revolution
	glTranslatef(0.2f, 0.0f, 0.0f);
	glutWireSphere(0.03, 10, 5); //태양 기준 6/100
	glPopMatrix();

	//수성
	glPushMatrix();
	glColor3f(0.0, 0.0, 1.0); // 회색
	glRotatef(MercuryRevolution, 0.0f, 1.0f, 0.0f); // 수성 공전
	glTranslatef(0.4f, 0.0f, 0.0f); //지구보다 가깝게
	glRotatef(MercuryRotation, 0.0f, 1.0f, 0.0f); // 수성 회전
	glutWireSphere(0.05, 10, 5); //태양 기준 1/10
	glPopMatrix();

	//금성
	glPushMatrix();
	glColor3f(0.5, 0.5, 0.5); // 회색
	glRotatef(VenusRevolution, 0.0f, 1.0f, 0.0f); // 금성 공전
	glTranslatef(0.55f, 0.0f, 0.0f); //지구보다 좀 가깝게
	glRotatef(VenusRotation, 0.0f, 1.0f, 0.0f); // 금성 회전
	glutWireSphere(0.125, 10, 5); //태양 기준 1/4 지구와 크기 같음
	glPopMatrix();
	//화성
	glPushMatrix();
	glColor3f(0.7, 0.3, 0.0); // 주황색
	glRotatef(MarsRevolution, 0.0f, 1.0f, 0.0f); // 화성 공전
	glTranslatef(0.85f, 0.0f, 0.0f); //지구 보다 좀더 멀게
	glRotatef(MarsRotation, 0.0f, 1.0f, 0.0f); // 화성 회전
	glutWireSphere(0.0625, 10, 5); //태양 기준 1/8
	glPopMatrix();
	//목성
	glPushMatrix();
	glColor3f(0.7, 0.3, 0.1); // 주황색보다 좀더 진한색
	glRotatef(JupiterRevolution, 0.0f, 1.0f, 0.0f); // 목성 공전
	glTranslatef(5.0f, 0.0f, 0.0f); //태양과 지구 거리를 1이라 할때 5
	glRotatef(JupiterRotation, 0.0f, 1.0f, 0.0f); // 목성 회전
	glutWireSphere(0.4, 10, 5); //지구를 1이라 했을때 약11배 하지만 지구를 태양의 1/4로 해서 임의로함
	glPopMatrix();
	//토성
	glPushMatrix();
	glColor3f(0.6, 0.3, 0.1); // 갈색
	glRotatef(SaturnRevolution, 0.0f, 1.0f, 0.0f); // 토성 공전
	glTranslatef(10.0f, 0.0f, 0.0f); //태양과 지구 거리를 1이라 할때 10
	glRotatef(SaturnRotation, 0.0f, 1.0f, 0.0f); // 토성 회전
	glutWireSphere(0.35, 10, 5); //지구의 약 9배 하지만 지구를 태양의 1/4로 해서 임의로함
	glPopMatrix();
	//천왕성
	glPushMatrix();
	glColor3f(0.0, 0.1, 0.8); // 푸른색
	glRotatef(UranusRevolution, 0.0f, 1.0f, 0.0f); // 천왕성 공전
	glTranslatef(20.0f, 0.0f, 0.0f); //태양과 지구 거리를 1이라 할때 20
	glRotatef(UranusRotation, 0.0f, 1.0f, 0.0f); // 천왕성 회전
	glutWireSphere(0.25, 10, 5); //지구의 약 4배 하지만 지구를 태양의 1/4로 해서 임의로함
	glPopMatrix();
	//해왕성
	glPushMatrix();
	glColor3f(0.0, 0.1, 0.9); // 옅은 파란색
	glRotatef(NeptuneRevolution, 0.0f, 1.0f, 0.0f); // 해왕성 공전
	glTranslatef(1.25f, 0.0f, 0.0f); //지구 보다 멀게
	glRotatef(NeptuneRotation, 0.0f, 1.0f, 0.0f); // 화성 회전
	glutWireSphere(0.25, 10, 5); //지구의 지름 4배
	glPopMatrix();

	glutSwapBuffers();
}
int main(int argc, char** argv)
{
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
	glutInitWindowSize(900, 900); //윈도우 사이즈 900 : 900
	glutCreateWindow("태양계 그리기");
	gluLookAt(0.1, 0.1, 0.1, 0.1, 0.0, 0.0, 1.0, 1.5, 0.0); //카메라 위치

	glutCreateMenu(main_menu_select);
	glutAddMenuEntry("Basic View", 1);
	glutAddMenuEntry("Above View", 2);
	glutAddMenuEntry("Side View", 3);
	glutAddMenuEntry("Front View", 4);
	glutAddMenuEntry("Random View", 5);
	glutAttachMenu(GLUT_RIGHT_BUTTON);  // 오른쪽 마우스 버튼


	glutSpecialFunc(Keyboard);
	glutKeyboardFunc(KeyBoardFunc);
	glutTimerFunc(delay, Timer, 1);
	glutDisplayFunc(display);

	glutMainLoop();

	return 0;
}








로그인 무림 

북검전기 

광마회귀

나노마신

무당기협